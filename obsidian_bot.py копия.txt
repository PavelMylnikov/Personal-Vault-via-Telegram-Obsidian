# –ò–º–ø–æ—Ä—Ç—ã
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import os
from datetime import datetime
import re

# üîê –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
TELEGRAM_TOKEN = "—Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ —Ñ–∞–∑–µ—Ä–∞"
MY_USER_ID = —Ç–≤–æ–π ID
SAVE_PATH = r"–ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –æ–±—Å–∏–¥–∏–∞–Ω"
MEDIA_PATH = os.path.join(SAVE_PATH, "media")
os.makedirs(MEDIA_PATH, exist_ok=True)

# === –£–ë–ò–†–ê–ï–ú –ú–£–°–û–† –ò –û–ü–ê–°–ù–´–ï –°–ò–ú–í–û–õ–´ ===
def clean_text(text):
    text = text.replace("\r", "").replace("\ufeff", "")
    text = re.sub(r"[\u200b\u202c]", "", text)
    return text.strip()

def make_safe_filename(text: str, fallback: str = "note", max_length: int = 40):
    base = text.strip() if text else fallback
    base = base.replace("\n", " ").replace("\r", "")
    base = re.sub(r"[\\/:*?\"<>|]", "_", base)
    return base[:max_length].strip("_")

# === –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–ï–ö–°–¢ –û–¢–ö–£–î–ê –°–ú–û–ñ–ï–ú ===
def extract_text(msg):
    sources = {
        "text": msg.text,
        "caption": msg.caption,
    }
    for label, value in sources.items():
        if value and isinstance(value, str) and len(value.strip()) > 0:
            print(f"üìå –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤: {label}")
            return clean_text(value)
    print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ.")
    return ""

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != MY_USER_ID:
        print(f"üö´ –ß—É–∂–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.message.from_user.id}")
        return

    message = update.message
    text = extract_text(message)
    print(f"üßæ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(text)}): {repr(text)}")

    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    safe_title = make_safe_filename(text)
    filename = f"{now}_{safe_title}.md"
    filepath = os.path.join(SAVE_PATH, filename)

    content = f"""---
tags: [telegram, –∑–∞–º–µ—Ç–∫–∞]
created: {now}
author: Pavel Mylnikov
---

# üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}

üìÖ {now}

{text}
"""

    media_links = ""

    if message.photo:
        photo_file = await message.photo[-1].get_file()
        photo_path = os.path.join(MEDIA_PATH, f"{now}_photo.jpg")
        await photo_file.download_to_drive(photo_path)
        rel_path = os.path.relpath(photo_path, SAVE_PATH).replace("\\", "/")
        media_links += f"\n![photo]({rel_path})"

    if message.document:
        doc_file = await message.document.get_file()
        doc_path = os.path.join(MEDIA_PATH, f"{now}_{message.document.file_name}")
        await doc_file.download_to_drive(doc_path)
        rel_path = os.path.relpath(doc_path, SAVE_PATH).replace("\\", "/")
        media_links += f"\n[üìé {message.document.file_name}]({rel_path})"

    if media_links:
        content += media_links

    if len(content.strip()) < 10:
        print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é.")
        return

    try:
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(content)
            f.flush()
            os.fsync(f.fileno())
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filepath)} –±–∞–π—Ç")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.ALL, handle_message))
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
app.run_polling()